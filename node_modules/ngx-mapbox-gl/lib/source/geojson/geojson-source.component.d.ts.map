{"version":3,"file":"geojson-source.component.d.ts","sources":["geojson-source.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnChanges, OnDestroy, OnInit, SimpleChanges, NgZone } from '@angular/core';\r\nimport { GeoJSONSourceOptions } from 'mapbox-gl';\r\nimport { Subject } from 'rxjs';\r\nimport { MapService } from '../../map/map.service';\r\nexport declare class GeoJSONSourceComponent implements OnInit, OnDestroy, OnChanges, GeoJSONSourceOptions {\r\n    private MapService;\r\n    private zone;\r\n    id: string;\r\n    data?: GeoJSONSourceOptions['data'];\r\n    maxzoom?: GeoJSONSourceOptions['maxzoom'];\r\n    attribution?: GeoJSONSourceOptions['attribution'];\r\n    buffer?: GeoJSONSourceOptions['buffer'];\r\n    tolerance?: GeoJSONSourceOptions['tolerance'];\r\n    cluster?: GeoJSONSourceOptions['cluster'];\r\n    clusterRadius?: GeoJSONSourceOptions['clusterRadius'];\r\n    clusterMaxZoom?: GeoJSONSourceOptions['clusterMaxZoom'];\r\n    clusterMinPoints?: GeoJSONSourceOptions['clusterMinPoints'];\r\n    clusterProperties?: GeoJSONSourceOptions['clusterProperties'];\r\n    lineMetrics?: GeoJSONSourceOptions['lineMetrics'];\r\n    generateId?: GeoJSONSourceOptions['generateId'];\r\n    promoteId?: GeoJSONSourceOptions['promoteId'];\r\n    filter?: GeoJSONSourceOptions['filter'];\r\n    updateFeatureData: Subject<unknown>;\r\n    private sub;\r\n    private sourceAdded;\r\n    private featureIdCounter;\r\n    constructor(MapService: MapService, zone: NgZone);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * For clustered sources, fetches the zoom at which the given cluster expands.\r\n     * @param clusterId The value of the cluster's cluster_id property.\r\n     */\r\n    getClusterExpansionZoom(clusterId: number): Promise<number>;\r\n    /**\r\n     * For clustered sources, fetches the children of the given cluster on the next zoom level (as an array of GeoJSON features).\r\n     * @param clusterId The value of the cluster's cluster_id property.\r\n     */\r\n    getClusterChildren(clusterId: number): Promise<import(\"geojson\").Feature<import(\"geojson\").Geometry, import(\"geojson\").GeoJsonProperties>[]>;\r\n    /**\r\n     * For clustered sources, fetches the original points that belong to the cluster (as an array of GeoJSON features).\r\n     * @param clusterId The value of the cluster's cluster_id property.\r\n     * @param limit The maximum number of features to return.\r\n     * @param offset The number of features to skip (e.g. for pagination).\r\n     */\r\n    getClusterLeaves(clusterId: number, limit: number, offset: number): Promise<import(\"geojson\").Feature<import(\"geojson\").Geometry, import(\"geojson\").GeoJsonProperties>[]>;\r\n    _addFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>): void;\r\n    _removeFeature(feature: GeoJSON.Feature<GeoJSON.GeometryObject>): void;\r\n    _getNewFeatureId(): number;\r\n    private init;\r\n}\r\n"]}