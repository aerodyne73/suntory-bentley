{"version":3,"file":"map.component.d.ts","sources":["map.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { AnimationOptions, ErrorEvent, EventData, LngLatBoundsLike, Map, MapboxEvent, MapboxOptions, MapBoxZoomEvent, MapContextEvent, MapMouseEvent, MapSourceDataEvent, MapStyleDataEvent, MapTouchEvent, MapWheelEvent, PointLike } from 'mapbox-gl';\r\nimport { MapService, MovingOptions } from './map.service';\r\nimport { MapEvent } from './map.types';\r\nexport declare class MapComponent implements OnChanges, OnDestroy, AfterViewInit, Omit<MapboxOptions, 'bearing' | 'container' | 'pitch' | 'zoom'>, MapEvent {\r\n    private MapService;\r\n    accessToken?: MapboxOptions['accessToken'];\r\n    collectResourceTiming?: MapboxOptions['collectResourceTiming'];\r\n    crossSourceCollisions?: MapboxOptions['crossSourceCollisions'];\r\n    customMapboxApiUrl?: string;\r\n    fadeDuration?: MapboxOptions['fadeDuration'];\r\n    hash?: MapboxOptions['hash'];\r\n    refreshExpiredTiles?: MapboxOptions['refreshExpiredTiles'];\r\n    failIfMajorPerformanceCaveat?: MapboxOptions['failIfMajorPerformanceCaveat'];\r\n    bearingSnap?: MapboxOptions['bearingSnap'];\r\n    interactive?: MapboxOptions['interactive'];\r\n    pitchWithRotate?: MapboxOptions['pitchWithRotate'];\r\n    clickTolerance?: MapboxOptions['clickTolerance'];\r\n    attributionControl?: MapboxOptions['attributionControl'];\r\n    logoPosition?: MapboxOptions['logoPosition'];\r\n    maxTileCacheSize?: MapboxOptions['maxTileCacheSize'];\r\n    localIdeographFontFamily?: MapboxOptions['localIdeographFontFamily'];\r\n    preserveDrawingBuffer?: MapboxOptions['preserveDrawingBuffer'];\r\n    trackResize?: MapboxOptions['trackResize'];\r\n    transformRequest?: MapboxOptions['transformRequest'];\r\n    bounds?: MapboxOptions['bounds'];\r\n    antialias?: MapboxOptions['antialias'];\r\n    locale: MapboxOptions['locale'];\r\n    minZoom?: MapboxOptions['minZoom'];\r\n    maxZoom?: MapboxOptions['maxZoom'];\r\n    minPitch?: MapboxOptions['minPitch'];\r\n    maxPitch?: MapboxOptions['maxPitch'];\r\n    scrollZoom?: MapboxOptions['scrollZoom'];\r\n    dragRotate?: MapboxOptions['dragRotate'];\r\n    touchPitch?: MapboxOptions['touchPitch'];\r\n    touchZoomRotate?: MapboxOptions['touchZoomRotate'];\r\n    doubleClickZoom?: MapboxOptions['doubleClickZoom'];\r\n    keyboard?: MapboxOptions['keyboard'];\r\n    dragPan?: MapboxOptions['dragPan'];\r\n    boxZoom?: MapboxOptions['boxZoom'];\r\n    style: MapboxOptions['style'];\r\n    center?: MapboxOptions['center'];\r\n    maxBounds?: MapboxOptions['maxBounds'];\r\n    zoom?: [number];\r\n    bearing?: [number];\r\n    pitch?: [number];\r\n    fitBoundsOptions?: MapboxOptions['fitBoundsOptions'];\r\n    renderWorldCopies?: MapboxOptions['renderWorldCopies'];\r\n    movingMethod: 'jumpTo' | 'easeTo' | 'flyTo';\r\n    movingOptions?: MovingOptions;\r\n    fitBounds?: LngLatBoundsLike;\r\n    fitScreenCoordinates?: [PointLike, PointLike];\r\n    centerWithPanTo?: boolean;\r\n    panToOptions?: AnimationOptions;\r\n    cursorStyle?: string;\r\n    mapResize: EventEmitter<MapboxEvent<undefined> & EventData>;\r\n    mapRemove: EventEmitter<MapboxEvent<undefined> & EventData>;\r\n    mapMouseDown: EventEmitter<MapMouseEvent & EventData>;\r\n    mapMouseUp: EventEmitter<MapMouseEvent & EventData>;\r\n    mapMouseMove: EventEmitter<MapMouseEvent & EventData>;\r\n    mapClick: EventEmitter<MapMouseEvent & EventData>;\r\n    mapDblClick: EventEmitter<MapMouseEvent & EventData>;\r\n    mapMouseOver: EventEmitter<MapMouseEvent & EventData>;\r\n    mapMouseOut: EventEmitter<MapMouseEvent & EventData>;\r\n    mapContextMenu: EventEmitter<MapMouseEvent & EventData>;\r\n    mapTouchStart: EventEmitter<MapTouchEvent & EventData>;\r\n    mapTouchEnd: EventEmitter<MapTouchEvent & EventData>;\r\n    mapTouchMove: EventEmitter<MapTouchEvent & EventData>;\r\n    mapTouchCancel: EventEmitter<MapTouchEvent & EventData>;\r\n    mapWheel: EventEmitter<MapWheelEvent & EventData>;\r\n    moveStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;\r\n    move: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;\r\n    moveEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;\r\n    mapDragStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    mapDrag: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    mapDragEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    zoomStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;\r\n    zoomEvt: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;\r\n    zoomEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | WheelEvent | undefined> & EventData>;\r\n    rotateStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    rotate: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    rotateEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    pitchStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    pitchEvt: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    pitchEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    boxZoomStart: EventEmitter<MapBoxZoomEvent & EventData>;\r\n    boxZoomEnd: EventEmitter<MapBoxZoomEvent & EventData>;\r\n    boxZoomCancel: EventEmitter<MapBoxZoomEvent & EventData>;\r\n    webGlContextLost: EventEmitter<MapContextEvent & EventData>;\r\n    webGlContextRestored: EventEmitter<MapContextEvent & EventData>;\r\n    mapLoad: EventEmitter<Map>;\r\n    idle: EventEmitter<MapboxEvent<undefined> & EventData>;\r\n    render: EventEmitter<MapboxEvent<undefined> & EventData>;\r\n    mapError: EventEmitter<ErrorEvent & EventData>;\r\n    data: EventEmitter<(MapSourceDataEvent & EventData) | (MapStyleDataEvent & EventData)>;\r\n    styleData: EventEmitter<MapStyleDataEvent & EventData>;\r\n    sourceData: EventEmitter<MapSourceDataEvent & EventData>;\r\n    dataLoading: EventEmitter<(MapSourceDataEvent & EventData) | (MapStyleDataEvent & EventData)>;\r\n    styleDataLoading: EventEmitter<MapStyleDataEvent & EventData>;\r\n    sourceDataLoading: EventEmitter<MapSourceDataEvent & EventData>;\r\n    styleImageMissing: EventEmitter<{\r\n        id: string;\r\n    } & EventData>;\r\n    /**\r\n     * @deprecated Use mapResize instead\r\n     */\r\n    resize: EventEmitter<MapboxEvent<undefined> & EventData>;\r\n    /**\r\n     * @deprecated Use mapRemove instead\r\n     */\r\n    remove: EventEmitter<MapboxEvent<undefined> & EventData>;\r\n    /**\r\n     * @deprecated Use mapMouseDown instead\r\n     */\r\n    mouseDown: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapMouseUp instead\r\n     */\r\n    mouseUp: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapMouseMove instead\r\n     */\r\n    mouseMove: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapClick instead\r\n     */\r\n    click: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapDblClick instead\r\n     */\r\n    dblClick: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapMouseOver instead\r\n     */\r\n    mouseOver: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapMouseOut instead\r\n     */\r\n    mouseOut: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapContextMenu instead\r\n     */\r\n    contextMenu: EventEmitter<MapMouseEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapTouchStart instead\r\n     */\r\n    touchStart: EventEmitter<MapTouchEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapTouchEnd instead\r\n     */\r\n    touchEnd: EventEmitter<MapTouchEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapTouchMove instead\r\n     */\r\n    touchMove: EventEmitter<MapTouchEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapTouchCancel instead\r\n     */\r\n    touchCancel: EventEmitter<MapTouchEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapWheel instead\r\n     */\r\n    wheel: EventEmitter<MapWheelEvent & EventData>;\r\n    /**\r\n     * @deprecated Use mapDragStart instead\r\n     */\r\n    dragStart: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    /**\r\n     * @deprecated Use mapDrag instead\r\n     */\r\n    drag: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    /**\r\n     * @deprecated Use mapDragEnd instead\r\n     */\r\n    dragEnd: EventEmitter<MapboxEvent<MouseEvent | TouchEvent | undefined> & EventData>;\r\n    /**\r\n     * @deprecated Use mapLoad instead\r\n     */\r\n    load: EventEmitter<Map>;\r\n    /**\r\n     * @deprecated Use mapError instead\r\n     */\r\n    error: EventEmitter<ErrorEvent & EventData>;\r\n    get mapInstance(): Map;\r\n    mapContainer: ElementRef;\r\n    constructor(MapService: MapService);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): Promise<void>;\r\n    private warnDeprecatedOutputs;\r\n}\r\n"]}