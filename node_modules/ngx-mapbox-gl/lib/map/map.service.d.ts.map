{"version":3,"file":"map.service.d.ts","sources":["map.service.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, InjectionToken, NgZone } from '@angular/core';\r\nimport * as MapboxGl from 'mapbox-gl';\r\nimport { Observable } from 'rxjs';\r\nimport { LayerEvents, MapEvent, MapImageData, MapImageOptions } from './map.types';\r\nexport declare const MAPBOX_API_KEY: InjectionToken<unknown>;\r\nexport interface SetupMap {\r\n    accessToken?: string;\r\n    customMapboxApiUrl?: string;\r\n    mapOptions: Omit<MapboxGl.MapboxOptions, 'bearing' | 'pitch' | 'zoom'> & {\r\n        bearing?: [number];\r\n        pitch?: [number];\r\n        zoom?: [number];\r\n    };\r\n    mapEvents: MapEvent;\r\n}\r\nexport interface SetupLayer {\r\n    layerOptions: MapboxGl.Layer;\r\n    layerEvents: LayerEvents;\r\n}\r\nexport interface SetupPopup {\r\n    popupOptions: MapboxGl.PopupOptions;\r\n    popupEvents: {\r\n        open: EventEmitter<void>;\r\n        close: EventEmitter<void>;\r\n        popupOpen: EventEmitter<void>;\r\n        popupClose: EventEmitter<void>;\r\n    };\r\n}\r\nexport interface SetupMarker {\r\n    markersOptions: {\r\n        pitchAlignment?: MapboxGl.MarkerOptions['pitchAlignment'];\r\n        rotationAlignment?: MapboxGl.MarkerOptions['rotationAlignment'];\r\n        offset?: MapboxGl.MarkerOptions['offset'];\r\n        anchor?: MapboxGl.MarkerOptions['anchor'];\r\n        draggable?: MapboxGl.MarkerOptions['draggable'];\r\n        element: HTMLElement;\r\n        feature?: GeoJSON.Feature<GeoJSON.Point>;\r\n        lngLat?: MapboxGl.LngLatLike;\r\n        clickTolerance?: MapboxGl.MarkerOptions['clickTolerance'];\r\n    };\r\n    markersEvents: {\r\n        markerDragStart: EventEmitter<MapboxGl.Marker>;\r\n        markerDrag: EventEmitter<MapboxGl.Marker>;\r\n        markerDragEnd: EventEmitter<MapboxGl.Marker>;\r\n        dragStart: EventEmitter<MapboxGl.Marker>;\r\n        drag: EventEmitter<MapboxGl.Marker>;\r\n        dragEnd: EventEmitter<MapboxGl.Marker>;\r\n    };\r\n}\r\nexport declare type MovingOptions = MapboxGl.FlyToOptions | (MapboxGl.AnimationOptions & MapboxGl.CameraOptions) | MapboxGl.CameraOptions;\r\nexport declare class MapService {\r\n    private zone;\r\n    private readonly MAPBOX_API_KEY;\r\n    mapInstance: MapboxGl.Map;\r\n    mapCreated$: Observable<void>;\r\n    mapLoaded$: Observable<void>;\r\n    mapEvents: MapEvent;\r\n    private mapCreated;\r\n    private mapLoaded;\r\n    private markersToRemove;\r\n    private popupsToRemove;\r\n    private imageIdsToRemove;\r\n    private subscription;\r\n    constructor(zone: NgZone, MAPBOX_API_KEY: string);\r\n    setup(options: SetupMap): void;\r\n    destroyMap(): void;\r\n    updateMinZoom(minZoom: number): void;\r\n    updateMaxZoom(maxZoom: number): void;\r\n    updateMinPitch(minPitch: number): void;\r\n    updateMaxPitch(maxPitch: number): void;\r\n    updateRenderWorldCopies(status: boolean): void;\r\n    updateScrollZoom(status: boolean): void;\r\n    updateDragRotate(status: boolean): void;\r\n    updateTouchPitch(status: boolean): void;\r\n    updateTouchZoomRotate(status: boolean): void;\r\n    updateDoubleClickZoom(status: boolean): void;\r\n    updateKeyboard(status: boolean): void;\r\n    updateDragPan(status: boolean): void;\r\n    updateBoxZoom(status: boolean): void;\r\n    updateStyle(style: MapboxGl.Style): void;\r\n    updateMaxBounds(maxBounds: MapboxGl.LngLatBoundsLike): void;\r\n    changeCanvasCursor(cursor: string): void;\r\n    queryRenderedFeatures(pointOrBox?: MapboxGl.PointLike | [MapboxGl.PointLike, MapboxGl.PointLike], parameters?: {\r\n        layers?: string[];\r\n        filter?: any[];\r\n    }): GeoJSON.Feature<GeoJSON.GeometryObject>[];\r\n    panTo(center: MapboxGl.LngLatLike, options?: MapboxGl.AnimationOptions): void;\r\n    move(movingMethod: 'jumpTo' | 'easeTo' | 'flyTo', movingOptions?: MovingOptions, zoom?: number, center?: MapboxGl.LngLatLike, bearing?: number, pitch?: number): void;\r\n    addLayer(layer: SetupLayer, bindEvents: boolean, before?: string): void;\r\n    removeLayer(layerId: string): void;\r\n    addMarker(marker: SetupMarker): MapboxGl.Marker;\r\n    removeMarker(marker: MapboxGl.Marker): void;\r\n    createPopup(popup: SetupPopup, element: Node): MapboxGl.Popup;\r\n    addPopupToMap(popup: MapboxGl.Popup, lngLat: MapboxGl.LngLatLike, skipOpenEvent?: boolean): void;\r\n    addPopupToMarker(marker: MapboxGl.Marker, popup: MapboxGl.Popup): void;\r\n    removePopupFromMap(popup: MapboxGl.Popup, skipCloseEvent?: boolean): void;\r\n    removePopupFromMarker(marker: MapboxGl.Marker): void;\r\n    addControl(control: MapboxGl.Control | MapboxGl.IControl, position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left'): void;\r\n    removeControl(control: MapboxGl.Control | MapboxGl.IControl): void;\r\n    loadAndAddImage(imageId: string, url: string, options?: MapImageOptions): Promise<void>;\r\n    addImage(imageId: string, data: MapImageData, options?: MapImageOptions): void;\r\n    removeImage(imageId: string): void;\r\n    addSource(sourceId: string, source: MapboxGl.AnySourceData): void;\r\n    getSource<T extends MapboxGl.AnySourceImpl>(sourceId: string): T;\r\n    removeSource(sourceId: string): void;\r\n    setAllLayerPaintProperty(layerId: string, paint: MapboxGl.BackgroundPaint | MapboxGl.FillPaint | MapboxGl.FillExtrusionPaint | MapboxGl.LinePaint | MapboxGl.SymbolPaint | MapboxGl.RasterPaint | MapboxGl.CirclePaint): void;\r\n    setAllLayerLayoutProperty(layerId: string, layout: MapboxGl.BackgroundLayout | MapboxGl.FillLayout | MapboxGl.FillExtrusionLayout | MapboxGl.LineLayout | MapboxGl.SymbolLayout | MapboxGl.RasterLayout | MapboxGl.CircleLayout): void;\r\n    setLayerFilter(layerId: string, filter: any[]): void;\r\n    setLayerBefore(layerId: string, beforeId: string): void;\r\n    setLayerZoomRange(layerId: string, minZoom?: number, maxZoom?: number): void;\r\n    fitBounds(bounds: MapboxGl.LngLatBoundsLike, options?: MapboxGl.FitBoundsOptions): void;\r\n    fitScreenCoordinates(points: [MapboxGl.PointLike, MapboxGl.PointLike], bearing: number, options?: MapboxGl.AnimationOptions & MapboxGl.CameraOptions): void;\r\n    applyChanges(): void;\r\n    private createMap;\r\n    private removeMarkers;\r\n    private removePopups;\r\n    private removeImages;\r\n    private findLayersBySourceId;\r\n    private hookEvents;\r\n    private assign;\r\n}\r\n"]}